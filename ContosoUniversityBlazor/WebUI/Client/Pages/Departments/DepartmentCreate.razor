@page "/departments/create"
@using WebUI.Shared.Departments.Commands.CreateDepartment
@using WebUI.Shared.Instructors.Queries.GetInstructorsLookup
@inject DepartmentService DepartmentService
@inject InstructorService InstructorService
@inject NavigationManager NavManager

<h1>Create</h1>

<h4>Department</h4>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm Model=@createDepartmentCommand OnSubmit=@FormSubmitted>
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText @bind-Value=createDepartmentCommand.Name class="form-control" id="Name" />
                <ValidationMessage For="() => createDepartmentCommand.Name" />
            </div>
            <div class="form-group">
                <label for="Budget">Budget</label>
                <InputNumber @bind-Value=createDepartmentCommand.Budget class="form-control" id="Budget" />
                <ValidationMessage For="() => createDepartmentCommand.Budget" />
            </div>
            <div class="form-group">
                <label for="StartDate">StartDate</label>
                <InputDate @bind-Value=createDepartmentCommand.StartDate class="form-control" id="StartDate" />
                <ValidationMessage For="() => createDepartmentCommand.StartDate" />
            </div>
            <div class="form-group">
                <label for="InstructorID">InstructorID</label>
                <CustomInputSelect @bind-Value=createDepartmentCommand.InstructorID class="form-control" id="InstructorID">
                    @if (instructorsLookup != null)
                    {
                        @foreach (var instructor in instructorsLookup.Instructors)
                        {
                            <option value="@instructor.ID">@instructor.FullName</option>
                        }
                    }
                </CustomInputSelect>
                <ValidationMessage For="() => createDepartmentCommand.InstructorID" />
            </div>
            <input type="submit" value="Create" class="btn btn-primary" />
        </EditForm>
    </div>
</div>

<div>
    <a href="/departments">Back to List</a>
</div>

@code {

    CreateDepartmentCommand createDepartmentCommand = new CreateDepartmentCommand() { StartDate = DateTime.UtcNow.Date };

    private InstructorsLookupVM instructorsLookup;

    protected override async Task OnInitializedAsync()
    {
        instructorsLookup = await InstructorService.GetLookupAsync();
        createDepartmentCommand.InstructorID = instructorsLookup.Instructors.First().ID;
    }

    private async Task FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();

        if (formIsValid)
        {
            var result = await DepartmentService.CreateAsync(createDepartmentCommand);

            if (result.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/departments");
            }
        }
    }
}
