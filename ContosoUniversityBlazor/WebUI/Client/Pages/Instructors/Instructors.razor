@page "/instructors"
@using WebUI.Shared.Instructors.Queries.GetInstructorsOverview
@using WebUI.Shared.Courses.Queries.GetCoursesForInstructor
@inject InstructorService InstructorService
@inject CourseService CourseService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<h2>Instructors</h2>

<p>
    <a href="/instructors/create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>Last Name</th>
            <th>First Name</th>
            <th>Hire Date</th>
            <th>Office</th>
            <th>Courses</th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        @if (instructorsOverview != null)
        {
            @foreach (var item in instructorsOverview.Instructors)
            {
                string selectedRow = "";
                if (SelectedInstructorId.HasValue && item.InstructorID == SelectedInstructorId.Value)
                {
                    selectedRow = "bg-success";
                }

                <tr class="@selectedRow">
                    <td>
                        @item.LastName
                    </td>
                    <td>
                        @item.FirstName
                    </td>
                    <td>
                        @item.HireDate.ToShortDateString()
                    </td>
                    <td>
                        @item.OfficeLocation
                    </td>
                    <td>
                        @{
                            foreach (var course in item.CourseAssignments)
                            {
                                @course.CourseID @:  @course.CourseTitle <br />
                            }
                        }
                    </td>
                    <td>
                        <a @onclick=@(e => SelectInstructor(item.InstructorID))>Select</a> |
                        <a href=@($"/instructors/edit/{item.InstructorID}")>Edit</a> |
                        <a href=@($"/instructors/{item.InstructorID}")>Details</a> |
                        <a @onclick=@(e => DeleteInstructor(item.InstructorID, $"{item.FirstName} {item.LastName}"))>Delete</a>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>

@if (courseForInstructorOverview != null)
{
    <h3>Courses Taught by Selected Instructor</h3>
    <table class="table">
        <tr>
            <th></th>
            <th>Number</th>
            <th>Title</th>
            <th>Department</th>
        </tr>

        @foreach (var item in courseForInstructorOverview.Courses)
        {
            string selectedRow = "";
            if (SelectedCourseId.HasValue && item.CourseID == SelectedCourseId.Value)
            {
                selectedRow = "bg-success";
            }
            <tr class="@selectedRow">
                <td>
                    <a @onclick=@(e => SelectCourse(item.CourseID))>Select</a>
                </td>
                <td>
                    @item.CourseID
                </td>
                <td>
                    @item.Title
                </td>
                <td>
                    @item.DepartmentName
                </td>
            </tr>
        }

    </table>
}

@code {

    private InstructorsOverviewVM instructorsOverview;
    private CoursesForInstructorOverviewVM courseForInstructorOverview;

    private int? SelectedInstructorId;
    private int? SelectedCourseId;

    protected override async Task OnInitializedAsync()
    {
        instructorsOverview = await InstructorService.GetAllAsync();
    }

    private async Task DeleteInstructor(int instructorId, string name)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the instructor '{name}'?"))
            return;

        var result = await InstructorService.DeleteAsync(instructorId.ToString());

        if (result.IsSuccessStatusCode)
        {
            instructorsOverview = await InstructorService.GetAllAsync();
        }
    }

    private async Task SelectInstructor(int instructorId)
    {
        SelectedInstructorId = instructorId;

        courseForInstructorOverview = await CourseService.GetCoursesForInstructor(instructorId.ToString());
    }

    private async Task SelectCourse(int courseId)
    {
        SelectedCourseId = courseId;


    }
}
